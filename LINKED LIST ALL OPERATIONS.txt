1.LINKED LIST(INSERT,DELETE,SORT,SEARCH)

#include <iostream>
#include <cstdlib> // for malloc

// Define a Node structure for the linked list
struct Node {
    int data;
    Node* next;
};

// Function to create a new node
Node* createNode(int value) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = value;
    newNode->next = nullptr;
    return newNode;
}

// Function to insert a new node at the beginning of the linked list
void insertAtBeginning(Node*& head, int value) {
    Node* newNode = createNode(value);
    newNode->next = head;
    head = newNode;
}

// Function to insert a new node after a specific position in the linked list
void insertAfterPosition(Node* prevNode, int value) {
    if (prevNode == nullptr) {
        std::cout << "Previous node is nullptr. Cannot insert." << std::endl;
        return;
    }
    
    Node* newNode = createNode(value);
    newNode->next = prevNode->next;
    prevNode->next = newNode;
}

// Function to insert a new node at the end of the linked list
void insertAtEnd(Node*& head, int value) {
    Node* newNode = createNode(value);
    
    if (head == nullptr) {
        head = newNode;
        return;
    }
    
    Node* current = head;
    while (current->next != nullptr) {
        current = current->next;
    }
    
    current->next = newNode;
}

// Function to search for a node with a specific value in the linked list
bool searchNode(Node* head, int value) {
    Node* current = head;
    while (current != nullptr) {
        if (current->data == value) {
            return true;
        }
        current = current->next;
    }
    return false;
}

// Function to delete a node with a specific value from the linked list
void deleteNode(Node*& head, int value) {
    Node* temp = head;
    Node* prev = nullptr;
    
    if (temp != nullptr && temp->data == value) {
        head = temp->next;
        free(temp);
        return;
    }
    
    while (temp != nullptr && temp->data != value) {
        prev = temp;
        temp = temp->next;
    }
    
    if (temp == nullptr) {
        std::cout << "Node with value " << value << " not found." << std::endl;
        return;
    }
    
    prev->next = temp->next;
    free(temp);
}

// Function to sort the linked list using bubble sort
void bubbleSort(Node* head) {
    if (head == nullptr || head->next == nullptr) {
        return; // Already sorted
    }

    bool swapped;
    Node* current;
    Node* lastSorted = nullptr;

    do {
        swapped = false;
        current = head;

        while (current->next != lastSorted) {
            if (current->data > current->next->data) {
                // Swap data
                int temp = current->data;
                current->data = current->next->data;
                current->next->data = temp;
                swapped = true;
            }
            current = current->next;
        }
        lastSorted = current;

    } while (swapped);
}

// Function to display the linked list
void displayList(Node* head) {
    Node* current = head;
    while (current != nullptr) {
        std::cout << current->data << " ";
        current = current->next;
    }
    std::cout << std::endl;
}

int main() {
    Node* head = nullptr;
    
    // Insert at beginning
    insertAtBeginning(head, 30);
    insertAtBeginning(head, 10);
    insertAtBeginning(head, 20);
    displayList(head);  // Output: 20 10 30
    
    // Insert after specific position (after 10)
    insertAfterPosition(head->next, 15);
    displayList(head);  // Output: 20 10 15 30
    
    // Insert at end
    insertAtEnd(head, 40);
    displayList(head);  // Output: 20 10 15 30 40
    
    // Search for a node
    if (searchNode(head, 15)) {
        std::cout << "Node with value 15 found." << std::endl;
    } else {
        std::cout << "Node with value 15 not found." << std::endl;
    }
    
    // Sort the linked list
    bubbleSort(head);
    displayList(head);  // Output: 10 15 20 30 40
    
    // Delete node with value 15
    deleteNode(head, 15);
    displayList(head);  // Output: 10 20 30 40
    
    return 0;
}
