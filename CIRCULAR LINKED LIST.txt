#include <iostream>

// Define a Node structure for the circular linked list
struct Node {
    int data;
    Node* next;
};

// Function to create a new node
Node* createNode(int value) {
    Node* newNode = new Node;
    newNode->data = value;
    newNode->next = nullptr;
    return newNode;
}

// Function to insert a new node at the beginning of the circular linked list
void insertAtBeginning(Node*& head, int value) {
    Node* newNode = createNode(value);
    
    if (head == nullptr) {
        newNode->next = newNode; // Point to itself for a single node
        head = newNode;
    } else {
        Node* current = head;
        while (current->next != head) {
            current = current->next;
        }
        current->next = newNode;
        newNode->next = head;
        head = newNode;
    }
}

// Function to delete a node with a specific value from the circular linked list
void deleteNode(Node*& head, int value) {
    if (head == nullptr) {
        return;
    }
    
    Node* current = head;
    Node* prev = nullptr;
    
    do {
        if (current->data == value) {
            if (current == head) {
                Node* tail = head;
                while (tail->next != head) {
                    tail = tail->next;
                }
                tail->next = head->next;
                head = head->next;
            } else {
                prev->next = current->next;
            }
            
            delete current;
            return;
        }
        
        prev = current;
        current = current->next;
    } while (current != head);
    
    std::cout << "Node with value " << value << " not found." << std::endl;
}

// Function to display the circular linked list
void displayList(Node* head) {
    if (head == nullptr) {
        std::cout << "Circular linked list is empty." << std::endl;
        return;
    }
    
    Node* current = head;
    do {
        std::cout << current->data << " ";
        current = current->next;
    } while (current != head);
    
    std::cout << std::endl;
}

int main() {
    Node* head = nullptr;
    
    // Insert at the beginning
    insertAtBeginning(head, 30);
    insertAtBeginning(head, 10);
    insertAtBeginning(head, 20);
    
    std::cout << "Circular linked list: ";
    displayList(head);  // Output: Circular linked list: 20 10 30
    
    // Delete node with value 10
    deleteNode(head, 10);
    
    std::cout << "Circular linked list after deletion: ";
    displayList(head);  // Output: Circular linked list after deletion: 20 30
    
    return 0;
}
