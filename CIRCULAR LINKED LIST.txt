#include <iostream>

// Define a Node structure for the circular linked list
struct Node {
    int data;
    Node* next;
};

// Function to create a new node
Node* createNode(int value) {
    Node* newNode = new Node;
    newNode->data = value;
    newNode->next = nullptr;
    return newNode;
}

// Function to insert a new node at the beginning of the circular linked list
void insertAtBeginning(Node*& head, int value) {
    Node* newNode = createNode(value);
    
    if (head == nullptr) {
        newNode->next = newNode; // Point to itself for a single node
        head = newNode;
    } else {
        Node* current = head;
        while (current->next != head) {
            current = current->next;
        }
        current->next = newNode;
        newNode->next = head;
        head = newNode;
    }
}

// Function to delete a node with a specific value from the circular linked list
void deleteNode(Node*& head, int value) {
    if (head == nullptr) {
        return;
    }
    
    Node* current = head;
    Node* prev = nullptr;
    
    do {
        if (current->data == value) {
            if (current == head) {
                Node* tail = head;
                while (tail->next != head) {
                    tail = tail->next;
                }
                tail->next = head->next;
                head = head->next;
            } else {
                prev->next = current->next;
            }
            
            delete current;
            return;
        }
        
        prev = current;
        current = current->next;
    } while (current != head);
    
    std::cout << "Node with value " << value << " not found." << std::endl;
}

// Function to display the circular linked list
void displayList(Node* head) {
    if (head == nullptr) {
        std::cout << "Circular linked list is empty." << std::endl;
        return;
    }
    
    Node* current = head;
    do {
        std::cout << current->data << " ";
        current = current->next;
    } while (current != head);
    
    std::cout << std::endl;
}

int main() {
    Node* head = nullptr;
    
    // Insert at the beginning
    insertAtBeginning(head, 30);
    insertAtBeginning(head, 10);
    insertAtBeginning(head, 20);
    
    std::cout << "Circular linked list: ";
    displayList(head);  // Output: Circular linked list: 20 10 30
    
    // Delete node with value 10
    deleteNode(head, 10);
    
    std::cout << "Circular linked list after deletion: ";
    displayList(head);  // Output: Circular linked list after deletion: 20 30
    
    return 0;
}





Certainly! The `deleteNode` function is responsible for deleting a node with a specific value from a circular linked list. Let me explain it step by step:

1. `if (head == nullptr)`: This condition checks if the linked list is empty (i.e., `head` is `nullptr`). If the list is empty, there's nothing to delete, so the function returns early without making any changes.

2. `Node* current = head;` and `Node* prev = nullptr;`: These lines initialize two pointers, `current` and `prev`, to traverse the circular linked list. `current` starts at the `head` of the list, and `prev` is initially set to `nullptr`.

3. `do { ... } while (current != head);`: This is a `do-while` loop that iterates through the circular linked list. The loop continues until `current` becomes equal to `head` again, indicating that we've completed one full iteration of the circular list.

4. `if (current->data == value) { ... }`: Inside the loop, this condition checks if the data value of the current node (`current->data`) is equal to the target value (`value`). If a node with the desired value is found:

   - `if (current == head) { ... }`: This part handles the case when the node to be deleted is the head of the circular linked list. In this case, it does the following:
      - It finds the tail of the circular list by traversing it with a `while` loop until it reaches a node whose `next` pointer is equal to `head`. This `tail` node will be the one just before the head.
      - It updates the `next` pointer of the `tail` node to skip the head node, effectively removing the head node from the circular list.
      - Finally, it updates the `head` pointer to point to the next node in the circular list, effectively making the next node the new head.

   - `else { ... }`: This part handles the case when the node to be deleted is not the head. In this case, it does the following:
      - It updates the `next` pointer of the `prev` node to skip the current node, effectively removing the current node from the circular list.
      
   - After either of the above cases, it deletes the current node using the `delete` operator to free the memory associated with it.

5. `std::cout << "Node with value " << value << " not found." << std::endl;`: If the loop completes without finding a node with the specified value, this line is executed to indicate that the value was not found in the list.

In summary, the `deleteNode` function searches for a node with the specified value in a circular linked list and deletes it. It handles the special case when the node to be deleted is the head of the list and updates the head accordingly.
