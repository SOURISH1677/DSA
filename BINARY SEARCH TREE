#include <iostream>
using namespace std;

// Structure for a binary tree node
struct TreeNode {
    int data;
    TreeNode* left;
    TreeNode* right;

    TreeNode(int val) : data(val), left(nullptr), right(nullptr) {}
};

class BinarySearchTree {
private:
    TreeNode* root;

    // Helper function to insert a value into the tree
    TreeNode* insertHelper(TreeNode* node, int value) {
        if (node == nullptr) {
            return new TreeNode(value);
        }

        if (value < node->data) {
            node->left = insertHelper(node->left, value);
        } else if (value > node->data) {
            node->right = insertHelper(node->right, value);
        }

        return node;
    }

    // Helper function to find the minimum value node in the tree
    TreeNode* findMinNode(TreeNode* node) {
        while (node->left != nullptr) {
            node = node->left;
        }
        return node;
    }

    // Helper function to delete a value from the tree
    TreeNode* deleteHelper(TreeNode* node, int value) {
        if (node == nullptr) {
            return node;
        }

        if (value < node->data) {
            node->left = deleteHelper(node->left, value);
        } else if (value > node->data) {
            node->right = deleteHelper(node->right, value);
        } else {
            // Node to be deleted found

            // Node with only one child or no child
            if (node->left == nullptr) {
                TreeNode* temp = node->right;
                delete node;
                return temp;
            } else if (node->right == nullptr) {
                TreeNode* temp = node->left;
                delete node;
                return temp;
            }

            // Node with two children: get the inorder successor (smallest in the right subtree)
            TreeNode* temp = findMinNode(node->right);

            // Copy the inorder successor's content to this node
            node->data = temp->data;

            // Delete the inorder successor
            node->right = deleteHelper(node->right, temp->data);
        }
        return node;
    }

public:
    BinarySearchTree() : root(nullptr) {}

    // Function to insert a value into the tree
    void insert(int value) {
        root = insertHelper(root, value);
    }

    // Function to search for a value in the tree
    bool search(int value) {
        TreeNode* current = root;
        while (current != nullptr) {
            if (value == current->data) {
                return true; // Value found
            } else if (value < current->data) {
                current = current->left;
            } else {
                current = current->right;
            }
        }
        return false; // Value not found
    }

    // Function to delete a value from the tree
    void remove(int value) {
        root = deleteHelper(root, value);
    }
};

int main() {
    BinarySearchTree bst;

    bst.insert(50);
    bst.insert(30);
    bst.insert(20);
    bst.insert(40);
    bst.insert(70);
    bst.insert(60);
    bst.insert(80);

    cout << "Binary Search Tree Operations:" << endl;
    cout << "Inorder Traversal (sorted): ";
    // Inorder traversal to display the sorted tree
    // Should print: 20 30 40 50 60 70 80
    bst.inorderTraversal(bst.getRoot());
    cout << endl;

    int value_to_search = 40;
    if (bst.search(value_to_search)) {
        cout << value_to_search << " found in the tree." << endl;
    } else {
        cout << value_to_search << " not found in the tree." << endl;
    }

    int value_to_remove = 30;
    bst.remove(value_to_remove);
    cout << "Inorder Traversal after removing " << value_to_remove << ": ";
    // Inorder traversal after removing 30
    // Should print: 20 40 50 60 70 80
    bst.inorderTraversal(bst.getRoot());
    cout << endl;

    return 0;
}
