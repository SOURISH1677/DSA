#include <iostream>

// Define a Node structure for the doubly linked list
struct Node {
    int data;
    Node* prev;
    Node* next;
};

// Function to create a new node
Node* createNode(int value) {
    Node* newNode = new Node;
    newNode->data = value;
    newNode->prev = nullptr;
    newNode->next = nullptr;
    return newNode;
}

// Function to insert a new node at the beginning of the doubly linked list
void insertAtBeginning(Node*& head, int value) {
    Node* newNode = createNode(value);
    
    if (head == nullptr) {
        head = newNode;
        return;
    }
    
    newNode->next = head;
    head->prev = newNode;
    head = newNode;
}

// Function to insert a new node at the end of the doubly linked list
void insertAtEnd(Node*& head, int value) {
    Node* newNode = createNode(value);
    
    if (head == nullptr) {
        head = newNode;
        return;
    }
    
    Node* current = head;
    while (current->next != nullptr) {
        current = current->next;
    }
    
    current->next = newNode;
    newNode->prev = current;
}

// Function to delete a node with a specific value from the doubly linked list
void deleteNode(Node*& head, int value) {
    if (head == nullptr) {
        return;
    }
    
    Node* current = head;
    
    while (current != nullptr) {
        if (current->data == value) {
            if (current->prev != nullptr) {
                current->prev->next = current->next;
            } else {
                head = current->next;
            }
            
            if (current->next != nullptr) {
                current->next->prev = current->prev;
            }
            
            delete current;
            return;
        }
        
        current = current->next;
    }
    
    std::cout << "Node with value " << value << " not found." << std::endl;
}

// Function to display the doubly linked list from the beginning
void displayListFromBeginning(Node* head) {
    Node* current = head;
    while (current != nullptr) {
        std::cout << current->data << " ";
        current = current->next;
    }
    std::cout << std::endl;
}

// Function to display the doubly linked list from the end
void displayListFromEnd(Node* head) {
    Node* current = head;
    
    if (head == nullptr) {
        return;
    }
    
    while (current->next != nullptr) {
        current = current->next;
    }
    
    while (current != nullptr) {
        std::cout << current->data << " ";
        current = current->prev;
    }
    std::cout << std::endl;
}

int main() {
    Node* head = nullptr;
    
    // Insert at the beginning
    insertAtBeginning(head, 30);
    insertAtBeginning(head, 10);
    insertAtBeginning(head, 20);
    
    std::cout << "Doubly linked list from beginning: ";
    displayListFromBeginning(head);  // Output: 20 10 30
    
    // Insert at the end
    insertAtEnd(head, 40);
    
    std::cout << "Doubly linked list from beginning: ";
    displayListFromBeginning(head);  // Output: 20 10 30 40
    
    std::cout << "Doubly linked list from end: ";
    displayListFromEnd(head);  // Output: 40 30 10 20
    
    // Delete node with value 10
    deleteNode(head, 10);
    
    std::cout << "Doubly linked list from beginning after deletion: ";
    displayListFromBeginning(head);  // Output: 20 30 40
    
    return 0;
}
