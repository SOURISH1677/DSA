#include <iostream>

// Define a Node structure for the doubly linked list
struct Node {
    int data;     // Data stored in the node
    Node* prev;   // Pointer to the previous node
    Node* next;   // Pointer to the next node
};

// Function to create a new node with the given data
Node* createNode(int data) {
    Node* newNode = new Node();  // Create a new node
    newNode->data = data;        // Set the data for the new node
    newNode->prev = nullptr;     // Initialize the previous pointer to nullptr
    newNode->next = nullptr;     // Initialize the next pointer to nullptr
    return newNode;              // Return the new node
}

// Function to insert a new node at the beginning of the list
void insertAtBeginning(Node*& head, int newData) {
    Node* newNode = createNode(newData);  // Create a new node with the data

    if (head == nullptr) {
        // If the list is empty, set the new node as the head
        head = newNode;
    } else {
        // If the list is not empty, adjust pointers to insert at the beginning
        newNode->next = head;
        head->prev = newNode;
        head = newNode;  // Update the head to the new node
    }
}

// Function to insert a new node at the end of the list
void insertAtEnd(Node*& head, int newData) {
    Node* newNode = createNode(newData);  // Create a new node with the data

    if (head == nullptr) {
        // If the list is empty, set the new node as the head
        head = newNode;
    } else {
        Node* current = head;

        // Traverse the list to find the last node
        while (current->next != nullptr) {
            current = current->next;
        }

        // Adjust pointers to insert the new node at the end
        current->next = newNode;
        newNode->prev = current;
    }
}

// Function to delete a node with a specific value from the list
void deleteNode(Node*& head, int key) {
    if (head == nullptr) {
        return; // List is empty, nothing to delete
    }

    Node* current = head;

    // Search for the node with the given data
    while (current != nullptr) {
        if (current->data == key) {
            // Adjust pointers to remove the node from the list
            if (current->prev != nullptr) {
                current->prev->next = current->next;
            }
            if (current->next != nullptr) {
                current->next->prev = current->prev;
            }

            // If the node to be deleted is the head, update the head pointer
            if (current == head) {
                head = current->next;
            }

            delete current; // Delete the current node to free memory
            return;        // Node found and deleted, exit the function
        }
        current = current->next;
    }

    std::cout << "Node with value " << key << " not found in the list." << std::endl;
}

// Function to display the doubly linked list
void displayList(Node* head) {
    Node* current = head;

    std::cout << "Doubly linked list: ";
    while (current != nullptr) {
        std::cout << current->data << " ";  // Print the data in the current node
        current = current->next;            // Move to the next node
    }
    std::cout << std::endl;
}

int main() {
    Node* head = nullptr;  // Initialize the head of the list to nullptr

    // Insert nodes at the beginning
    insertAtBeginning(head, 3);
    insertAtBeginning(head, 2);
    insertAtBeginning(head, 1);

    // Display the doubly linked list
    displayList(head);

    // Insert nodes at the end
    insertAtEnd(head, 4);
    insertAtEnd(head, 5);

    // Display the doubly linked list again
    displayList(head);

    // Delete a node
    deleteNode(head, 2);

    // Display the updated doubly linked list
    displayList(head);
    return 0;
}

