1   BINARY TREE

#include <iostream>
using namespace std;
//A structure to create node
struct Node {
int data;
struct Node* left;
struct Node* right;
// A constructor to the struct node
// that inserts value in the data variable.
Node(int value)
{
data = value;
left = NULL;//Left child is initialized to NULL
right = NULL;//Right child is initialized to NULL
}
};

void preorder(struct Node* root)
{
    if(root==NULL)
    {
        return;
    }
    cout<<root->data<<" ";
    preorder(root->left);
    preorder(root->right);
    
}
void postorder(struct Node*root)
{
    if(root==NULL)
    {
        return;
    }
    postorder(root->left);
    postorder(root->right);
    cout<<root->data<<" ";
    
}
void inorder(struct Node*root)
{
  if(root==NULL)
    {
        return;
    }
     inorder(root->left);
     cout<<root->data<<" ";
     inorder(root->right);
    
}

/*        1
         / \
        2   3
       / \ / \ 
      4  5 6  7
      */
int main()
{
    struct Node*root=new Node(1);
    root->left=new Node(2);
     root->right=new Node(3);
      root->left->left=new Node(4);
       root->left->right=new Node(5);
        root->right->left=new Node(6); 
         root->right->right=new Node(7);
         
         preorder(root);  // 1 2 4 5 3 6 7 
         postorder(root); // 4 5 2 6 7 3 1
         inorder(root);     // 4 2 5 1 6 3 7 
         return 0;
}




2  BFS

#include <iostream>
#include <queue>
using namespace std;

// Structure for holding data, references to the left child and the right child of the current node
struct node {
    int data;
    struct node *left, *right;
};

// Method for initialising new node with provided data value
node* new_node(int data) {
    node *temp = new node;
    temp->data = data;
    temp->left = temp->right = NULL;
    return temp;
}

int main() {
    node *root = new_node(5);
    root->left = new_node(12);
    root->right = new_node(7);
    root->left->left = new_node(18);
    root->left->left->left = new_node(4);
    root->left->left->right = new_node(13);
    root->right->right = new_node(69);
    
    cout << "BFS for the above tree will be: \n";
    
    // We will use a queue data structure for maintaining order between nodes
    queue<node *> q;
    
    // Pushing the root node into the queue
    q.push(root); 
    
    // Iterating over the queue until its non empty
    while (q.empty() == false){
        // Printing the current node from front of the queue
        node *node = q.front();
        cout << node->data << " ";
        // Removing the front node
        q.pop();
        // Pushing left and right child into the queue only if they exist
        // We push the left child first so as to maintain the order 
        if (node->left != NULL)
            q.push(node->left);
        if (node->right != NULL)
            q.push(node->right);
    }
    return 0;
}
Output
BFS for the above tree will be: 
5 12 7 18 69 4 13

3  

